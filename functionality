// Global variables
let timer;
let baseTime = 15; // Base shower time in minutes
let currentTime = baseTime * 60; // Convert to seconds
let isRunning = false;
let penaltyAmount = 0;
let totalTributes = 0;
let tributeTimer;
let tributeSeconds = 0;
let isTributeRunning = false;

// DOM Elements
const timerDisplay = document.getElementById("timer");
const startButton = document.getElementById("startTimer");
const pauseButton = document.getElementById("pauseTimer");
const resetButton = document.getElementById("resetTimer");
const penaltyAmountDisplay = document.getElementById("penaltyAmount");
const progressBar = document.getElementById("progressBar");
const progressText = document.getElementById("progressText");
const totalTributesDisplay = document.getElementById("totalTributes");

// Ritual checkboxes
const ritualCheckboxes = document.querySelectorAll(".ritual-item input");

// Tribute buttons
const tributeButtons = document.querySelectorAll(".tribute-btn");

// Initialize
updateTimerDisplay();

// Event Listeners
startButton.addEventListener("click", startTimer);
pauseButton.addEventListener("click", pauseTimer);
resetButton.addEventListener("click", resetTimer);

// Ritual checkboxes changes
ritualCheckboxes.forEach((checkbox) => {
  checkbox.addEventListener("change", updateRituals);
});

// Tribute buttons
tributeButtons.forEach((button) => {
  button.addEventListener("click", submitTribute);
});

// Timer Functions
function startTimer() {
  if (!isRunning) {
    isRunning = true;
    timer = setInterval(() => {
      currentTime--;
      updateTimerDisplay();

      if (currentTime <= 0) {
        clearInterval(timer);
        // Apply penalty for overtime
        applyPenalty();
      }
    }, 1000);
  }
}

function pauseTimer() {
  clearInterval(timer);
  isRunning = false;
}

function resetTimer() {
  clearInterval(timer);
  isRunning = false;
  currentTime = baseTime * 60;
  penaltyAmount = 0;
  penaltyAmountDisplay.textContent = penaltyAmount;
  updateTimerDisplay();
}

function updateTimerDisplay() {
  const minutes = Math.floor(currentTime / 60);
  const seconds = currentTime % 60;
  timerDisplay.textContent = `${minutes.toString().padStart(2, "0")}:${seconds
    .toString()
    .padStart(2, "0")}`;

  // Change color when time is running out
  if (minutes < 1) {
    timerDisplay.style.color = "#ff4757";
  } else {
    timerDisplay.style.color = "#d23669";
  }
}

function applyPenalty() {
  penaltyAmount += 20; // 20 EGP per minute
  penaltyAmountDisplay.textContent = penaltyAmount;

  // Continue counting overtime
  currentTime--;
  updateTimerDisplay();
  timer = setInterval(() => {
    currentTime--;
    if (currentTime % 60 === 0) {
      // Every new minute
      penaltyAmount += 20;
      penaltyAmountDisplay.textContent = penaltyAmount;
    }
    updateTimerDisplay();
  }, 1000);
}

// Ritual Functions
function updateRituals() {
  // Reset base time to 15 minutes
  baseTime = 15;

  // Add time for each selected ritual
  ritualCheckboxes.forEach((checkbox) => {
    if (checkbox.checked) {
      baseTime += parseInt(checkbox.dataset.time);
    }
  });

  // Reset timer with new base time
  currentTime = baseTime * 60;
  updateTimerDisplay();
  updateProgress();
}

// Progress Functions
function updateProgress() {
  const totalSteps = ritualCheckboxes.length;
  const checkedSteps = document.querySelectorAll(
    ".ritual-item input:checked"
  ).length;
  const progress = (checkedSteps / totalSteps) * 100;

  progressBar.style.width = `${progress}%`;
  progressText.textContent = `${Math.round(progress)}% completed`;
}

// Tribute Functions
function submitTribute() {
  const tributeOption = this.closest(".tribute-option");
  const amount = parseInt(tributeOption.dataset.amount);

  totalTributes += amount;
  totalTributesDisplay.textContent = totalTributes;

  // Visual feedback
  tributeOption.style.backgroundColor = "#ffebee";
  setTimeout(() => {
    tributeOption.style.backgroundColor = "#f8f8f8";
  }, 300);

  // Confirmation message
  alert(
    `Tribute of ${amount} EGP submitted successfully!\nTotal tributes: ${totalTributes} EGP`
  );
}
